#!/usr/bin/env bash

#########/
# word curls thesaruses and reverse dictionaries with human-readable queries
# Copyright (C) 2017  Seamus Johnston https://seamusjohnston.com
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#########\

# Print usage if no args or help asked
read -r -d '' usage << 'EOF'
Usage: word [options] [primary modifiers] <word|phrase> \
       [primary|secondary modifiers <word|phrase|number>]

Commandline interface to Datamuse and Owlbot APIs

    -v[vv]                           Verbose modes.
    -h, --help                       Print this help.

Primary modifier examples:
   meaning          "word meaning feeling tired"
   sounds like      "word which sounds like tung"
                    "word sounding like doe but spelled differently"
   rhymes with      "word rhymes with culminate"
   comes after      "word comes after sea and that rhymes with norse"
   spelled like     "word spelled like 'cens?r'"
   defined          "word nostrum defined" 
   pronunciation    "word pronunciation of otolaryngology"
   no ... exactly   "word meaning of life"              == ml=of+life
                    "word no meaning of life exactly"   == ml=meaning+of+life
                    "word "meaning of life""            == ml=meaning+of+life
Secondary modifiers:
   max              "word like beautiful max 7"         (default is 20)
   about            "word meaning refuse about trash"   (max is 5 nouns)
                    "word meaning refuse about negotiation contracts"

word tries to guess your intent. If it messes up, use quotes.
Optionally, read <<CONTRIBUTING.md>> and open an issue,
so I can fix it for the next person.

EOF
if [[ $# -eq 0 || $1 =~ (--help)|(-h) ]]; then echo "$usage"; exit 1; fi

# Turn on verbose if flagged
case $1 in
    -v)   verbose=1 ; shift ;;
    -vv)  verbose=2 ; shift ;;
    -vvv) verbose=3 ; shift ;;
    -x)   dry_run=1 ; verbose=2 ; shift ;;
esac

# Vars for creating the curl request
api="datamuse"
max=20
params=("ml" "sl" "sp" "rel_jja" "rel_jjb" "rel_syn" "rel_trg" "rel_ant" "rel_spc" "rel_gen" "rel_com" "rel_par" "rel_bga" "rel_bgb" "rel_rhy" "rel_nry" "rel_hom" "rel_cns" "lc" "rc" "topics")
gloss=("have a meaning like" "sound like" "are spelled like" "is a noun describing the adjective" "is an adjective describing the noun" "are synonyms of" "are triggered by" "are antonyms of" "are a more general word for" "are a specific kind of" "are the parts of" "describe things made with" "usually follow" "usually preceed" "are perfect rhymes of" "are approximate rhymes of" "are homophones of" "have the same consonants as" "often follow" "often come before" "are about")

# Rhymes is hard to spell
is_rhymes() {
    rhymes=("rhymes" "rhytms" "rhytems" "ryhms" "rhyms" "rhymnes" "ryhmes" "rhimes" "rymes" "rhtyms" "ryhtyms" "rhyemes" "rhymmes" "rymhs" "rhmes" "rhyms" "rhyhms" "rhytams" "ryphmes")
    for r in ${rhymes[@]}; do
        if [[ $1 = $r ]]; then
            return 0
        fi
    done
    return 1
}

# Pronounced is also hard to spell
is_pronounced() {
    pronounced=("pronounced" "pronunciation" "pronounsed" "pronouced" "pronouned" "pronounciated" "prenounced" "prounouced" "pernounced" "purnounced" "pronoused" "pronuced" "pronunced" "pronnounced" "pronanced" "prononced" "prounounced" "prononsed" "prononuced" "pernunciation" "prononciation" "prounciation" "pronouciation" "pronounciated" "pronounciation" "pronanciation" "prononcation" "pernounciation" "prononceation" "prenunciation" "prononseation" "prounouciation" "pronuniation" "pronunication" "prenounciation" "pronuntiation" "pronuncition" "pronociation" "prenunsiation" "pronounsation" "pronounceation" "pronounication" "pronauciation" "pronounciacion" "pronounsiation")
    for p in ${pronounced[@]}; do
        if [[ $1 = $p ]]; then
            return 0
        fi
    done
    return 1
}

# Convert to number
convert_num() {
    case $1 in
        one) user_max=1 ;;
        two) user_max=2 ;;
        three) user_max=3 ;;
        four) user_max=4 ;;
        five) user_max=5 ;;
        six) user_max=6 ;;
        seven) user_max=7 ;;
        eight) user_max=8 ;;
        nine) user_max=9 ;;
        ten) user_max=10 ;;
        *) user_max=$(echo "$1" | sed 's/[^0-9]//')
    esac
}

# Deliniate the end of a phrase
stop_word() {
    stop_words=("and" "no" "meaning" "means" "max" "about" "which" "that")
    for s in ${stop_words[@]}; do
        if [[ $1 = $s ]]; then
            return 0
        fi
    done
    return 1
}

go_curl() {
    curl_res=$(curl -m 15 -sG "$1")
    if [[ $? -ne 0 ]]; then
        printf "\033[0;36mUnable to reach API.\033[0m Check your internet connection or try again with more feeling.\n"
        exit 1
    elif [[ $curl_res = "[]" && $api != "owlbot" ]]; then
        if hash fortune 2>/dev/null; then
            printf "\033[0;36mNo results found!\033[0m Have a fortune cookie:\n"
            fortune -s
        else
            printf "\033[0;36mNo results found!\033[0m Try a paper dictionary instead?\n"
        fi
        exit 1
    fi
}

# Deal first with the metadata flags
case $# in
    2) if [[ $2 =~ defin(ed)|(ition) ]]; then
           sp="$1"; api="owlbot"; shift 2
       elif is_pronounced $2; then
           sp="$1"; md="r"; shift 2
       fi ;;
    3) if [[ "$1" = "definition" && "$2" =~ (of)|(for) ]]; then
           sp="$3"; api="owlbot"; shift 3
       elif [[ "$2 $3" = "means what" ]]; then
           sp="$1"; api="owlbot"; shift 3
       elif [[ $2 =~ (of)|(for) ]] && is_pronounced $1; then
           sp="$3"; md="r"; shift 3
       fi ;;
    4) if [[ "$2 $3 $4" = "is said how" ]]; then
          sp="$3"; md="r"; shift 3
       fi ;;
esac

# Parse the cmdln args from left to right
while [[ $# -gt 0 ]]; do
    # If ./word is parsing a phrase wrong, we can
    # "quote" it with ./word no <phrase> exactly
    if [[ $1 = "no" && $# -gt 1 ]]; then
        shift
        while [[ $1 != "exactly" && $# -gt 0 ]]; do
            ml="${ml:+"$ml "}$1"
            shift
        done
        if [[ $1 = "exactly" ]]; then shift; fi

    # Otherwise, try to find modifier words

    elif [[ $1 =~ sound(s)|(ing) && $2 = "like" ]]; then
        # Disambiguate homonyms from spelling variants
        if [[ $4 =~ (but)|(except) ]] && [[ $5 = "spelled" ]] && \
           [[ $6 =~ different(ly)* ]]; then
            rel_hom="$3"
            shift 6
        else
            sl="$3"
            shift 3
        fi
    elif [[ $1 =~ spell(ed|ing) ]]; then
        if [[ $2 = "like" ]]; then shift; fi
        sp="$2"
        shift 2
    elif [[ $# -gt 2 && $2 = "with" ]] && is_rhymes $1; then
        rel_rhy="$3"
        shift 3
    elif [[ $# -gt 3 && "$1 $3" = "almost with" ]] && is_rhymes $2; then
        rel_nry="$4"
        shift 4

    elif [[ "$1 $2" = "comes after" && $# -gt 2 ]]; then
        lc="$3"
        shift 3
    elif [[ "$1 $2" = "comes before" && $# -gt 2 ]]; then
        rc="$3"
        shift 3
    elif [[ $1 = "follows" ]]; then
        lc="$2"
        shift 2
    elif [[ $1 = "preceeds" ]]; then
        rc="$2"
        shift 2
    elif [[ $1 = "describes" ]]; then
        rel_jjb="$2"
        shift 2
    elif [[ "$1 $2" = "associated with" && $# -gt 2 ]]; then
        rel_trg="$3"
        shift 3
    elif [[ "$1 $2" = "triggered by" && $# -gt 2 ]]; then
        rel_trg="$3"
        shift 3

    elif [[ $1 = "means" || $1 = "meaning" || $1 = "like" ]]; then
        shift
        while [[ $# -gt 0 ]] && ! stop_word $1; do
            ml="${ml:+"$ml "}$1"
            shift
        done

    # Discover the topic of our query
    elif [[ $1 = "about" ]]; then
        shift
        while [[ $# -gt 0 ]] && ! stop_word $1; do
            topics="${topics:+"$topics,"}$1"
            shift
        done

    # How many results to return max 1000
    elif [[ $1 = "max" || $1 = "maximum" || $1 = "only" ]]; then
        convert_num $2
        shift 2
        if [[ $user_max -gt 1000 ]]; then
            user_max=1000
        fi

    # Remove filler words if they weren't parsed out above
    elif [[ $1 = "that" || $1 = "which" ]]; then
        shift
    elif [[ $1 = "and" ]]; then
        shift
    elif [[ $1 = "like" || $1 = "is" ]]; then
        shift

    # Add anything not otherwise parsable to reverse dictionary query
    else
        ml="${ml:+"$ml "}$1"
        shift
    fi
done # while [[ $# -gt 0 ]]

# Build the curl request
if [[ $api = "datamuse" && $md = "r" ]]; then
    curl_req="https://api.datamuse.com/words?max=1&sp=${sp}&qe=sp&md=r&ipa=1"
    asked=("You asked for the pronunciation of '${sp}'.")
elif [[ $api = "datamuse" ]]; then
    curl_req="https://api.datamuse.com/words?max=${user_max:-"$max"}"
    # For each paramater, if it is defined, uri encode it and add it to the query string
    for i in ${!params[@]}; do
        if [[ -n ${!params[i]} ]]; then
            curl_req="${curl_req}&${params[i]}=$(printf %s "${!params[i]}" | jq -s -R -r @uri)"
            asked+=("and ${gloss[i]} '${!params[i]}'")
        fi
    done
    asked="You asked for words which $(echo "${asked[@]}" | sed -E 's/^and //')${user_max:+", max $user_max results"}."
elif [[ $api = "owlbot" ]]; then
    curl_req="https://owlbot.info/api/v2/dictionary/$(echo "$sp" | sed -E "s/[^a-Z'-]*//g")"
    asked=("You asked for the definition of '${sp}'.")
fi

# Plain english description of our query
if [[ $verbose -gt 0 ]]; then
    printf "%s\n" "$asked"
fi

# What we are going to ask the remote server
if [[ $verbose -gt 1 ]]; then
    printf "%s\n" "I ran curl -sG \"${curl_req}\""
fi

if [[ ! $dry_run ]]; then
    # Ask away! (with a tiny bit of error handling)
    go_curl $curl_req
    
    # Parse and display return values
    if [[ $md = "r" ]]; then
        printf "\033[0;36mdatamuse\033[0m says word \033[0;32m${sp}\033[0m "
        echo $curl_res | jq -j '.[].tags[] | capture("ipa_pron:(?<ipa>.*+)"),capture("^pron:(?<alpha>.+)")' | \
            jq -s -r -M 'add | @text "is pronounced like \(.alpha) (ipa: \(.ipa))"'
    elif [[ $api = "owlbot" ]]; then
        if [[ $curl_res != "[]" ]]; then
            printf "\033[0;36mowlbot\033[0m says word \033[0;32m$sp\033[0m "
            echo $curl_res | jq -j '.[] | @text "means \(.definition)\nexample: \(.example)\n"'
        fi
        api="datamuse"
        go_curl "https://api.datamuse.com/words?max=1&sp=${sp}&qe=sp&md=d&ipa=1"
        printf "\033[0;36mdatamuse\033[0m says word \033[0;32m$sp\033[0m means\n"
        echo $curl_res | jq -c -r '.[].defs[]'
    elif [[ -n $ml ]]; then
        printf "                                  \033[0;36mdatamuse thinks these words may help!\033[0m\n"
        plain_text=$(printf %s "$curl_res"  | jq -j '.[] | @text "\(.word)\t\(.tags // [])\n"')
        IFS=$'\n\t'
            printf "\033[0;32m%14s\033[0m %20s \033[0;32m%14s\033[0m %20s\n" $plain_text
        unset IFS
    else
        printf "                                  \033[0;36mdatamuse thinks these words may help!\033[0m\n"
        plain_text=$(printf %s "$curl_res"  | jq -j '.[] | @text "\(.word) "')
        printf "\033[0;32m%14s\033[0m \033[0;32m%14s\033[0m \033[0;32m%14s\033[0m \033[0;32m%14s\033[0m\n" $plain_text
    fi
    
    # The raw return JSON, passed through jq for highlighting
    if [[ $verbose -gt 2 ]]; then
        echo $curl_res | jq -c
    fi
fi

exit 0
